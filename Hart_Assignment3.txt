from scipy.stats import binom, uniform
from random import random, gauss
import numpy as np
import matplotlib.pyplot as plt

#From class code
flips = ["H","T","H","T","H"]               #Defining data 
flips = flips*100                           # Uncomment (and modify) this line to create a more informative dataset   
n = len(flips)                              #n is the total number of binomial trials
k = sum([1 for fl in flips if fl == "H"])   #k is the number of all successes, counting Heads as successes.


def likelihood(n,k,p,testingPrior=False):
    if testingPrior:                        #If testingPrior=True, this will return a 1. If this works correctly, the posterior should be equal to the prior
        return 1
    if p < 0:                               #If the probability is less than 0 (which is impossible), then return 0 to indicate that there is an error
        return 0
    elif p > 1:                             #If the probability is greater than 1 (which is also impossible), then return 0 to indicate that there is an error
        return 0
    else:
        return binom.pmf(n,k,p)

def prior(p):                               
    return uniform.pdf(p)

def posterior(n,k,p):
    posterior=prior(p)*likelihood(n,k,p)
    return posterior
    
estimates=[]
priors=[]
likelihoods=[]
posteriors=[]
params=[]

def draw_proposal(n,k):																								#Drawing from a proposal distribution
    numValues=1																										#Not sure why this needs defining
    uniScale=1																										#
    param_vals = uniform.rvs(size=numValues,loc=0.5,scale=uniScale)  	#scale = standard deviation; loc = mean; here, the param_vals are being drawn from the uniform (random var = rvs) 
    params.append(param_vals)											#Putting the param_vals into the params list above
    return param_vals
    print ("From the proposal distribution, the paramater values are",param_vals)
    
def MCMC(n,k,p,reps):
    for i in range:
        param_val = uniform.rvs(size=numValues,loc=0.5,scale=uniScale)  #Defining the param_val from the uniform distribution to be the pNew
        pNew=param_val 													#trying to get the pNew to be from the proposal distribution											
        r=posterior(n,k,pNew)/posterior(n,k,p)							#Ratio is posterior density of new over posterior density of old
        if r > 1: 														#If the ratio is greater than 1 change the p to pNew
            p=pNew
        elif r < 1:														#If the ratio is less than one, make a random choice between 0 and 1
            rand = random.choice(0, 1)
        if rand < r:													#If the random choice is less than the ratio, change p to pNew
            p=pNew
        elif rand > r: 													#If the random choice is greater than the ratio, keep p the same
            p=p
        else:
            return ("Freaking works")
  
#I have code that I would use for creating a histogram but I don't have data and I don't know what I would put in anyway. From http://matplotlib.org/1.3.1/users/pyplot_tutorial.html       

n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)	#Include data here

																		#Labeling the histogram
plt.xlabel('x_label')													
plt.ylabel('y_label')
plt.title('Histogram of ___')
plt.text(5, 10, r$'text_on_graph')										#Define where on the graph you want your text, then what the text is
plt.axis([x_lowest, x_highest, y_lowest, y_highest])
plt.grid(True) 															#Gridlines
plt.show()

##Found this further code- was mine not working because I didn't have a theta? https://people.duke.edu/~ccc14/sta-663/MCMC.html . Oy vey though, pmf and pdf?? You can mix those? 
def target(lik, prior, n, h, theta):
    if theta < 0 or theta > 1:
        return 0
    else:
        return lik(n, theta).pmf(h)*prior.pdf(theta)

n = 100
h = 61
a = 10
b = 10
lik = st.binom
prior = st.beta(a, b)
sigma = 0.3

naccept = 0
theta = 0.1
niters = 10000
samples = np.zeros(niters+1)
samples[0] = theta
for i in range(niters):
    theta_p = theta + st.norm(0, sigma).rvs()
    rho = min(1, target(lik, prior, n, h, theta_p)/target(lik, prior, n, h, theta ))
    u = np.random.uniform()
    if u < rho:
        naccept += 1
        theta = theta_p
    samples[i+1] = theta
nmcmc = len(samples)//2
print "Efficiency = ", naccept/niters

#Code for trace from  https://people.duke.edu/~ccc14/sta-663/MCMC.html

def mh_coin(niters, n, h, theta, lik, prior, sigma):
    samples = [theta]
    while len(samples) < niters:
        theta_p = theta + st.norm(0, sigma).rvs()
        rho = min(1, target(lik, prior, n, h, theta_p)/target(lik, prior, n, h, theta ))
        u = np.random.uniform()
        if u < rho:
            theta = theta_p
        samples.append(theta)
    return samples
    
n = 100
h = 61
lik = st.binom
prior = st.beta(a, b)
sigma = 0.05
niters = 100

sampless = [mh_coin(niters, n, h, theta, lik, prior, sigma) for theta in np.arange(0.1, 1, 0.2)]

for samples in sampless:
    plt.plot(samples, '-o')
plt.xlim([0, niters])
plt.ylim([0, 1]);

