state_space_rainsun = ("sun","rain")
tMatrix_rainsun = np.matrix([0.7,0.3],[0.3,0.7])    
current_state = "sun"

class MChain(object):
    """
    This is our Markov chain class. State_space must be a list
    """
    def __init__(self,nChains=1,nSteps,state_space=[],tMatrix=[]):
        self.nSteps=nSteps			#Number of steps
        self.nChains=nChains
        self.state_space=state_space		#State space, which is a list
        self.tMatrix=tMatrix			#Transition matrix
        self.sample_states=sample_states	#Sampled states, which is a list
        self.sample_freq=[]
        
        
    def draw(new_state=[],probs=[])		
    	rand_num = random.uniform(0,1)
    	if rand_num <= tMatrix[current_index],[proposed_index]:
    	current_index = current_index
        
    def run(self,current_state):
		for i in range(0,nSteps):
			new_state = 

			probs = tMatrix[states.index(current_state)]
			
			

PAM'S ATTEMPT BELOW
import numpy as np
import random

state_space = ("sun","rain")   
current_state = "sun"

tMatrix = np.matrix([0.7,0.3],[0.3,0.7])
list=["0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"]
print(random.choice(list))

class MChain(object):
    """
    This is our Markov chain class. State_space must be a list
    """
    def __init__(self,nChains,nSteps,state_space,tMatrix):
        self.nSteps=nSteps			#Number of steps
        self.nChains=nChains
        self.state_space=state_space		#State space, which is a list
        self.tMatrix=tMatrix			#Transition matrix
        self.sample_states=[]	#Sampled states, which is a list
        self.sample_freq=[]
        
    def draw (self,list=[]):
        random_draw = random.choice(list)
        for np.matrix[0] in tMatrix:                        #For the first row in the matrix...
            while random_draw <=0.0:                        #If the random draw is greater than or equal to 0.0 continue
                if random_draw <= 0.3:                      #If the random draw is less than or equal to 0.3...
                    state="rain"                                 #then the state is R
                    sample_states.append(state)             #and append to sample states
                elif random_draw >= 0.4:                    #If the random draw is greater than or equal to 0.4...
                    state="sun"                                 #then the state is S
                    sample_states.append(state)             #and append to sample states 
                    
    def run(self,current_state):
        for i in range(nSteps):
            new_state = draw(list)
        
