#2a1
def factorial(min,max):
    								#Factorial function for a range of min and max
    num=max 
    for i in range(min,max): 		#For every variable in the range of min and max,
        num*=i 						#multiply the maximum by each value in the range from min to max
    return num
  
def factorial(n,k):
    num=1
    if (n<0):
        print ("'Domain error in function factorial'")
        return -1; 
    else:
        for k in range(1,n+1):
            num*=k
    return num

#2a2
def bincoef(n,k):					#Function for calculating binomial coefficient. n choose k
    for i in range (n-k+1,n):		#This for-loop is the numerator in the binomial coefficient equation. For every variable in the range n-k+1 (min) to n (max)
        n*=i						#Make n equal to the previous/last called n * i (next variable in range)
    for i in range(1,k):			#For-loop for the factorial of k (k!)
        k*=i
    return n/k						#Return n (now the value of numerator in binomial coef) divided by k (now k!)
    print(n/k)						#Print the bincoef value

#2a4  
def pmf(n,k,p):									#Function for calculating the probability mass function when given n trials of k sets with p probability. Binomial distribution is (n,p). 
    pmf=bincoef(n,k)*pow(p,k)*pow(1-p,n-k)		#PMF = P(X=k) = (n choose k)p^k(1-p)^n-k. Reads: The probability of # of successes (k) with a binomial distribution of (n,p) is ...
    return (pmf)								#Return the value of pmf
#2a5   
import random

events=['win','loss','draw','bigfatnope']
probs=['0.1','0.2','0.3','0.4']
    
def samp_disc_dist(events,probs):
    events=['win','loss','draw','bigfatnope']
    probs=['0.1','0.2','0.3','0.4']
    samp_disc_dist=random.choice(events)
    sampleid=events.index(samp_disc_dist)
    event=events[sampleid]
    prob=probs[sampleid]
    print ('The probability of',event,'is',prob)

#2b
def hillclimb(n,k,p,d):														#Diego and I designed the backbone of this code together
    pCurr= p																#Parameter p
    diff = d																#Diff = step size
    precision = 0.001														
    while (diff > precision):
        pUp= pCurr+diff														#pUp is pCurr plus step
        pDown= pCurr-diff													#pDown is pCurr minus step
        likelipCurr=pmf(n,k,pCurr)											
        likelipUp=pmf(n,k,pUp)
        likelipDown=pmf(n,k,pDown)
        maxlik = max(likelipCurr,likelipUp, likelipDown )					#Max likelihood is the max out of the three likelihoods
        while (likelipCurr > likelipUp) or (likelipCurr > likelipDown):
            pCurr = pCurr
            print (pCurr)
            while (likelipCurr != maxlik):
                while likelipUp > likelipCurr:
                    pCurr = pUp
                    pUp = pCurr+diff
                    likelipCurr=pmf(n,k,pCurr)
                    likelipUp=pmf(n,k,pUp)
                    likelipDown=pmf(n,k,pDown)
                    print(pCurr, likelipCurr)
                while likelipDown > likelipCurr:
                    pCurr = pDown
                    pDown = pCurr-diff
                    likelipCurr=pmf(n,k,pCurr)
                    likelipUp=pmf(n,k,pUp)
                    likelipDown=pmf(n,k,pDown)
                    print(pCurr, likelipCurr)
                break
            return(pCurr)


import random 

def lrc(n,k,p):												#Not working, I believe there's an issue in previous code
    d=0.1
    mltrue=hillclimb(n,k,p,d)
    random_k=[random.randint(1,n-1) for i in range (100)]
    maxlikeli=[]
    for i in random_k:
        d=0.1
        maxlikeli=hillclimb(n,random_k,p,d)
        MLindex=tuple(maxlikeli)
        print(MLindex)
    for i in MLindex:
        lr=MLindex/mltrue
        print(lr,maxlikeli,random_k,p)
        
		